generator client {
  provider = "prisma-client-js"
  previewFeatures = ["filteredRelationCount"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String               @id @default(uuid()) @db.Uuid
  email            String               @unique @db.VarChar(256)
  firstName        String               @db.VarChar(256)
  lastName         String?              @db.VarChar(256)
  avatar           String?              @db.VarChar(2048)
  chats            ChatMember[]
  messages         Message[]
  views            UserViewedMessage[]
  attachments      Attachment[]
  userSecurity     UserSecurity?
  userSecurityId   String?              @db.Uuid
  emojis           Emoji[]
  status           UserStatusTypes      @default(OFFLINE)
  isVerified       Boolean              @default(false)
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
}

model UserSecurity {
  id                     String  @id @default(uuid()) @db.Uuid
  user                   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                 String  @unique @db.Uuid
  password               String? @db.VarChar(300)
  passwordChangeToken    String? @db.VarChar(300)
  emailActivationToken   String? @unique @db.VarChar(300)
  refreshToken           String? @db.VarChar(300)
  googleAccId            String? @unique @db.VarChar(300)
  facebookAccId          String? @unique @db.VarChar(300)
}

model Chat {
  id              String       @id @default(uuid()) @db.Uuid
  title           String?      @db.VarChar(256)
  poster          String?
  members         ChatMember[]
  messages        Message[]
  type            ChatTypes    @default(DIALOG)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model ChatMember {
  id        String      @id @default(uuid()) @db.Uuid
  user      User        @relation(fields: [userId], references: [id])
  userId    String      @db.Uuid
  chat      Chat        @relation(fields: [chatId], references: [id], onDelete: Cascade)
  type      MemberTypes @default(MEMBER)
  chatId    String      @db.Uuid
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Message {
  id          String              @id @default(uuid()) @db.Uuid
  sender      User                @relation(fields: [senderId], references: [id])
  senderId    String              @db.Uuid
  chat        Chat                @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId      String              @db.Uuid
  text        String?
  attachments Attachment[]
  views       UserViewedMessage[]
  replyTo     Message?            @relation("replyForwards", fields: [replyToId], references: [id], onDelete: NoAction)
  forwards    Message[]           @relation("replyForwards")
  replyToId   String?             @db.Uuid
  emojis      Emoji[]
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
}

model UserViewedMessage {
  id        String  @id @default(uuid()) @db.Uuid
  userId    String  @db.Uuid
  user      User    @relation(fields: [userId], references: [id], onDelete: NoAction)
  messageId String  @db.Uuid
  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
}

model Emoji {
  id        String  @id @default(uuid()) @db.Uuid
  userId    String  @db.Uuid
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  messageId String  @db.Uuid
  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  emoji     String
}

model Attachment {
  id          String          @id @default(uuid()) @db.Uuid
  userId      String          @db.Uuid
  user        User            @relation(fields: [userId], references: [id])
  messageId   String          @db.Uuid
  message     Message         @relation(fields: [messageId], references: [id], onDelete: Cascade)
  type        AttachmentTypes @default(FILE)
  url         String          @db.VarChar(2000)
  title       String          @db.VarChar(256)
  ext         String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

enum AttachmentTypes {
  PHOTO
  FILE
  VOICE
  MUSIC
}

enum ChatTypes {
  DIALOG
  GROUP
}

enum MemberTypes {
  MEMBER
  ADMIN
}

enum UserStatusTypes {
  ONLINE
  OFFLINE
}